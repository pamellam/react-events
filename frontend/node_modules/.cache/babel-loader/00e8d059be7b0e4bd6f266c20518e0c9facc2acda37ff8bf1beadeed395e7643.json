{"ast":null,"code":"var _jsxFileName = \"/Users/pamelamladenova/Documents/12-adv-starting-project/frontend/src/pages/EventsPage.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  const events = data.events;\n  if (events.isError) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: events.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return { isError: true, message: 'Could not fetch events' };\n    // throw new Response(JSON.stringify({ message: 'Could not fetch events' }), {\n    //   status: 500,\n    // });\n    return json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","_s","data","events","isError","children","message","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","status","loader","$RefreshReg$"],"sources":["/Users/pamelamladenova/Documents/12-adv-starting-project/frontend/src/pages/EventsPage.js"],"sourcesContent":["import { useLoaderData, json, defer } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\n\nfunction EventsPage() {\n  const data = useLoaderData();\n\n  const events = data.events;\n  if (events.isError) {\n    return <p>{events.message}</p>;\n  }\n  return (\n    <>\n      <EventsList events={events} />\n    </>\n  );\n}\n\nexport default EventsPage;\n\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n\n  if (!response.ok) {\n    // return { isError: true, message: 'Could not fetch events' };\n    // throw new Response(JSON.stringify({ message: 'Could not fetch events' }), {\n    //   status: 500,\n    // });\n    return json({ message: 'Could not fetch events.' }, { status: 500 });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  })\n}\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,QAAQ,kBAAkB;AAC7D,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGV,aAAa,CAAC,CAAC;EAE5B,MAAMW,MAAM,GAAGD,IAAI,CAACC,MAAM;EAC1B,IAAIA,MAAM,CAACC,OAAO,EAAE;IAClB,oBAAOP,OAAA;MAAAQ,QAAA,EAAIF,MAAM,CAACG;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAChC;EACA,oBACEb,OAAA,CAAAE,SAAA;IAAAM,QAAA,eACER,OAAA,CAACF,UAAU;MAACQ,MAAM,EAAEA;IAAO;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAC9B,CAAC;AAEP;AAACT,EAAA,CAZQD,UAAU;EAAA,QACJR,aAAa;AAAA;AAAAmB,EAAA,GADnBX,UAAU;AAcnB,eAAeA,UAAU;AAEzB,eAAeY,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA,OAAOtB,IAAI,CAAC;MAAEa,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEU,MAAM,EAAE;IAAI,CAAC,CAAC;EACtE,CAAC,MAAM;IACL,OAAOH,QAAQ;EACjB;AACF;AACA,OAAO,SAASI,MAAMA,CAAA,EAAG;EACvB,OAAOvB,KAAK,CAAC;IACXS,MAAM,EAAES,UAAU,CAAC;EACrB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAO,YAAA,CAAAP,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}